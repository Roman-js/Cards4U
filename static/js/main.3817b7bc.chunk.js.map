{"version":3,"sources":["ui/authorization/Header/Header.module.css","ui/authorization/Auth.module.css","ui/common/Input.tsx","ui/common/Button.tsx","ui/common/LInk.tsx","ui/common/Title.tsx","ui/authorization/Register-page/Register.tsx","ui/authorization/SetNewPass-page/SetNewPass.tsx","ui/authorization/Header/Header.tsx","ui/common/Constants.ts","ui/authorization/SignIn-page/SignIn.tsx","dal/api.ts","ui/authorization/SignIn-page/SignInContainer.tsx","ui/authorization/Forgot-page/Forgot.tsx","ui/authorization/Forgot-page/ForgotContainer.tsx","ui/cards/Cards.tsx","bll/reducers/forgot-reducer.ts","bll/reducers/profile-reducer.ts","bll/reducers/registser-reducer.ts","bll/reducers/setNewPass-reducer.ts","bll/reducers/signIn-reducer.ts","bll/store.ts","App.tsx","serviceWorker.ts","index.tsx","ui/common/Common.module.css"],"names":["module","exports","Input","props","className","styles","forInput","onFocus","onBlur","value","onChange","placeholder","type","Button","forButton","typeOfButton","onClick","actionOfButton","disabled","nameOfButton","Link","forLinks","to","way","wordOfLink","Title","title","Register","wrapperOfAuth","SetNewPass","Header","wrapperOfHeader","SignIn","useState","email","setEmail","password","setPassword","rememberMe","setRememberMe","loading","e","currentTarget","checked","setSignInFormValues","instance","axios","create","baseURL","authApi","post","then","res","console","log","html1","html2","SignInContainer","dispatch","useDispatch","useSelector","state","signIn","disable","catch","fal","Forgot","toCleanError","error","setForgotPassword","ForgotContainer","forgot","emailApproved","result","response","data","Cards","path","render","initialState","forgotReducer","action","profileReducer","registerReducer","setNewPassReducer","signInReducer","rootReducer","combineReducers","register","setNewPass","profile","store","createStore","applyMiddleware","thunkMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3817b7bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperOfHeader\":\"Header_wrapperOfHeader__3r8LB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperOfAuth\":\"Auth_wrapperOfAuth__3XmyS\"};","import React, {ChangeEvent} from \"react\";\r\nimport styles from './Common.module.css'\r\n\r\ntype OwnPropsType = {\r\n    value?: string,\r\n    checked?: boolean,\r\n    placeholder?: string,\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    type: 'text' | 'password' | 'radio' | 'checkbox',\r\n    onBlur?: ()=>void,\r\n    onFocus?: (e: React.FocusEvent)=>void\r\n}\r\n\r\nconst Input = (props: OwnPropsType) => {\r\n\r\n    return (\r\n        <input className={styles.forInput}\r\n               onFocus={props.onFocus}\r\n               onBlur={props.onBlur}\r\n               value={props.value}\r\n               onChange={props.onChange}\r\n               placeholder={props.placeholder}\r\n               type={props.type}/>\r\n    )\r\n};\r\n\r\nexport default Input\r\n\r\n","import React from \"react\";\r\nimport styles from './Common.module.css'\r\n\r\nconst Button = (props: OwnPropsType) =>{\r\n\r\n    return(\r\n        <button\r\n            className={styles.forButton}\r\n            type={props.typeOfButton}\r\n            onClick={props.actionOfButton}\r\n            disabled={props.disabled}\r\n        >\r\n            {props.nameOfButton}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n\r\ntype OwnPropsType = {\r\n    typeOfButton: \"button\" | \"submit\" | \"reset\" | undefined,\r\n    actionOfButton: ()=>void,\r\n    nameOfButton: string,\r\n    disabled?: boolean\r\n\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from './Common.module.css'\r\n\r\nconst Link = (props: OwnPropsType) =>{\r\n\r\n    return(\r\n        <NavLink className={styles.forLinks} to={props.way}>{props.wordOfLink}</NavLink>\r\n    )\r\n}\r\n\r\nexport default Link\r\n\r\ntype OwnPropsType = {\r\n    way: string,\r\n    wordOfLink: string\r\n}","import React from \"react\";\r\n\r\nconst Title = (props: OwnPropsType) =>{\r\n\r\n    return(\r\n        <div>\r\n            <h2>{props.title}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title\r\n\r\ntype OwnPropsType = {\r\n    title: string\r\n}","import React from \"react\";\r\nimport Input from \"../../common/Input\";\r\nimport Button from \"../../common/Button\";\r\nimport Link from \"../../common/LInk\";\r\nimport Title from \"../../common/Title\";\r\nimport styles from \"../Auth.module.css\";\r\n\r\n\r\nconst Register = () => {\r\n    return (\r\n\r\n            <div className={styles.wrapperOfAuth}>\r\n                <Title title='register'/>\r\n                <div><Input placeholder={'email'}\r\n                            type={\"text\"}\r\n                            value={''}\r\n                            onChange={()=>{}}/></div>\r\n                <div><Input placeholder={'password'}\r\n                            type={\"text\"}\r\n                            value={''}\r\n                            onChange={()=>{}}/></div>\r\n                <div><Input placeholder={'repeat password'}\r\n                            type={\"text\"} value={''}\r\n                            onChange={()=>{}}/></div>\r\n                <div><Button typeOfButton={\"button\"}\r\n                             actionOfButton={() => {}}\r\n                             disabled={false}\r\n                             nameOfButton={'Register'}/></div>\r\n                <Link way={'/sign-in'} wordOfLink='Sign In'/>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Register","import React from \"react\";\r\nimport Title from \"../../common/Title\";\r\nimport Input from \"../../common/Input\";\r\nimport Button from \"../../common/Button\";\r\nimport Link from \"../../common/LInk\";\r\nimport styles from \"../Auth.module.css\";\r\n\r\n\r\nconst SetNewPass = () => {\r\n    return (\r\n\r\n            <div className={styles.wrapperOfAuth}>\r\n                <Title title='Set New Password'/>\r\n                <div><Input placeholder={'new pass'}\r\n                            type={'text'} value={''}\r\n                            onChange={()=>{}}/></div>\r\n                <div><Input placeholder={'repeat pass'}\r\n                            type={'text'}\r\n                            value={''}\r\n                            onChange={()=>{}}/></div>\r\n                <div><Button typeOfButton={\"button\"}\r\n                             disabled={false}\r\n                             actionOfButton={() => {\r\n                }} nameOfButton='Set new password'/></div>\r\n                <div><Link way={'/sign-in'} wordOfLink='Sign In'/></div>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SetNewPass","import React from \"react\";\r\nimport Link from \"../../common/LInk\";\r\nimport styles from './Header.module.css'\r\nimport {FORGOT, REGISTER, SET_NEW_PASS, SIGN_IN} from \"../../common/Constants\";\r\n\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={styles.wrapperOfHeader}>\r\n            <Link way={SIGN_IN} wordOfLink={'sign-in'}/>\r\n            <Link way={REGISTER} wordOfLink={'register'}/>\r\n            <Link way={FORGOT} wordOfLink={'forgot'}/>\r\n            <Link way={SET_NEW_PASS} wordOfLink={'set-new-pass'}/>\r\n            <Link way={SIGN_IN} wordOfLink={'neko'}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Header\r\n","export const SIGN_IN = '/sign-in'\r\nexport const REGISTER = '/register'\r\nexport const FORGOT = '/forgot'\r\nexport const SET_NEW_PASS = '/set-new-pass'\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport Input from \"../../common/Input\";\r\nimport Link from \"../../common/LInk\";\r\nimport Button from \"../../common/Button\";\r\nimport Title from \"../../common/Title\";\r\nimport styles from \"../Auth.module.css\";\r\n\r\ntype OwnPropsType = {\r\n    setSignInFormValues: (email: string, password: string, rememberMe: boolean)=>void\r\n    loading: boolean\r\n    disabled: boolean\r\n}\r\n\r\n\r\nconst SignIn: React.FC<OwnPropsType> = (props) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n    //пример UseSelector Достаем данные из store\r\n    //const valueOfInputEmail = useSelector((state: AppStoreType) => state.signIn.email);\r\n\r\n\r\n    const changeEmail = (e: ChangeEvent<HTMLInputElement>) =>{\r\n       return setEmail(e.currentTarget.value)\r\n    }\r\n    const changePassword = (e: ChangeEvent<HTMLInputElement>) =>{\r\n        return setPassword(e.currentTarget.value)\r\n    }\r\n    const changeRememberMe = (e: ChangeEvent<HTMLInputElement>) =>{\r\n       return !rememberMe ? setRememberMe(true): setRememberMe(false)\r\n    }\r\n\r\n    const sendSignInFormValues = () =>{\r\n        return(\r\n            props.setSignInFormValues(email,password,rememberMe))\r\n    };\r\n\r\n    return (\r\n\r\n            <div className={styles.wrapperOfAuth}>\r\n                <Title title={'sign-in'}/>\r\n                {props.loading?<div>loading...</div>: null}\r\n                <div><Input type=\"text\"\r\n                            placeholder='email'\r\n                            value={email}\r\n                            onChange={changeEmail}/></div>\r\n                <div><Input type=\"password\"\r\n                            placeholder='password'\r\n                            value={password}\r\n                            onChange={changePassword}/></div>\r\n                <div><Link way={'/forgot'}\r\n                           wordOfLink={'Forgot password?'}/></div>\r\n                <div><Input type={\"checkbox\"}\r\n                            checked={rememberMe}\r\n                            onChange={changeRememberMe}/>Remember Me</div>\r\n                <div><Button typeOfButton={\"button\"}\r\n                             actionOfButton={sendSignInFormValues}\r\n                             disabled={props.disabled}\r\n                             nameOfButton='Sign In'/></div>\r\n                <div><Link way={'/register'} wordOfLink='Registration'/></div>\r\n            </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default SignIn","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n   // withCredentials: true,\r\n    baseURL:\"https://neko-cafe-back.herokuapp.com/auth/\",\r\n})\r\n\r\nexport const authApi = {\r\n\r\n    login(email: string, password: string, rememberMe: boolean){\r\n        return instance.post(\"login\", {email, password, rememberMe})\r\n            .then(res=>{return console.log(res)})\r\n            //.catch(fal=>console.log(fal))\r\n    },\r\n\r\n    forgotPass(email: string, html1: string, html2: string){\r\n        return instance.post('forgot', {email, html1, html2})\r\n            .then(res=>{return console.log(res)})\r\n            //.catch(fal=>console.log(fal))\r\n    },\r\n\r\n    authMe(){\r\n        return instance.post('auth/me', {token: ''})\r\n            .then(res=>res)\r\n            .catch((fal)=>{return fal})\r\n    },\r\n\r\n    setNewPass(resetPasswordToken: string, password: string){\r\n        return instance.post('auth/set-new-password', {resetPasswordToken, password})\r\n    }\r\n};","import React from \"react\";\r\nimport SignIn from \"./SignIn\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {authApi} from \"../../../dal/api\";\r\nimport {AppStoreType} from \"../../../bll/store\";\r\n\r\n\r\nconst SignInContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const loading = useSelector((state: AppStoreType) => state.signIn.loading)\r\n    const disable = useSelector((state: AppStoreType) => state.signIn.disabled)\r\n    //const valueOfInputEmail = useSelector((state: AppStoreType) => state.signIn.email);\r\n\r\n    const setSignInFormValues = (email: string, password: string, rememberMe: boolean) => {\r\n        dispatch({type: 'SET-LOADING-DATA', loading: true, disabled: true})\r\n        authApi.login(email, password, rememberMe)\r\n            .then(res => {\r\n                return res;\r\n                dispatch({type: 'SET-LOADING-DATA', loading: false, disabled: false})\r\n            })\r\n            .catch(fal => {\r\n                    console.log(fal);\r\n                    dispatch({type: 'SET-LOADING-DATA', loading: false, disabled: false})\r\n                }\r\n            );\r\n        return (\r\n            dispatch({\r\n                type: 'SET-SIGN-IN-FORM-VALUES',\r\n                email: email,\r\n                password: password,\r\n                rememberMe: rememberMe,\r\n            })\r\n        )\r\n    };\r\n    return (\r\n        <>\r\n            <SignIn setSignInFormValues={setSignInFormValues}\r\n                    loading={loading}\r\n                    disabled={disable}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SignInContainer","import React, {ChangeEvent, useState} from \"react\";\r\nimport Title from \"../../common/Title\";\r\nimport Button from \"../../common/Button\";\r\nimport Link from \"../../common/LInk\";\r\nimport Input from \"../../common/Input\";\r\nimport styles from '../Auth.module.css'\r\n\r\ntype OwnPropsType = {\r\n    setForgotPassword: (email: string) => void\r\n    toCleanError: () => void\r\n    loading: boolean\r\n    disabled: boolean\r\n    error: string | null\r\n}\r\nconst Forgot = (props: OwnPropsType) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n\r\n    const valueOfInputEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    };\r\n    const restoreForgotPassword = () => {\r\n        props.setForgotPassword(email)\r\n        setEmail('')\r\n    };\r\n    const toCleanError = () => {\r\n        return props.toCleanError()\r\n    };\r\n\r\n    return (\r\n\r\n        <div className={styles.wrapperOfAuth}>\r\n            <Title title='forgot'/>\r\n            {props.loading ? <div>Loading...</div> : null}\r\n            {props.error ? <div>{props.error}</div> : null}\r\n            <div><Input placeholder='email address'\r\n                        type={\"text\"}\r\n                        value={email}\r\n                        onBlur={toCleanError}\r\n                        onFocus={toCleanError}\r\n                        onChange={valueOfInputEmail}/></div>\r\n            <div><Button typeOfButton={\"button\"}\r\n                         actionOfButton={restoreForgotPassword}\r\n                         nameOfButton='Send email'\r\n                         disabled={props.disabled}/></div>\r\n            <div><Link way={'/sign-in'} wordOfLink='Sign In'/></div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Forgot","import React from \"react\";\r\nimport Forgot from \"./Forgot\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {authApi} from \"../../../dal/api\";\r\nimport {AppStoreType} from \"../../../bll/store\";\r\nimport {Redirect} from \"react-router\";\r\n\r\n\r\nconst ForgotContainer = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const state = useSelector((state: AppStoreType) => state.forgot);\r\n\r\n    const html1 = \"<a href='http://localhost:3000/template-typescript#/set-new-pass'\";\r\n    const html2 = \">reset-password-link</a>\";\r\n\r\n\r\n    const setForgotPassword = (email: string) => {\r\n        dispatch({type: 'SET-LOADING-DATA-FORGOT-PAGE', loading: true, disabled: true});\r\n        authApi.forgotPass(email,\r\n            html1, html2)\r\n            .then(result => {\r\n                return result;\r\n                dispatch({type: 'SET-LOADING-DATA-FORGOT-PAGE', loading: false, disabled: false, emailApproved: true});\r\n            })\r\n            .catch(fal => {\r\n                console.log(fal.response.data.error);\r\n                const error = fal.response.data.error;\r\n                dispatch({type: 'SET-VALUE-ERROR', error: error})\r\n                dispatch({type: 'SET-LOADING-DATA-FORGOT-PAGE', loading: false, disabled: false})\r\n            });\r\n\r\n        return (\r\n            dispatch({type: 'RESTORE-FORGOT-PASSWORD', email})\r\n        )\r\n    };\r\n    const toCleanError = () => {\r\n        dispatch({type: 'SET-VALUE-ERROR', error: null})\r\n    };\r\n    return (\r\n        !state.emailApproved ?\r\n            <Forgot setForgotPassword={setForgotPassword}\r\n                    toCleanError={toCleanError}\r\n                    loading={state.loading}\r\n                    disabled={state.disabled}\r\n                    error={state.error}/> :\r\n            <Redirect to='/set-new-pass'/>\r\n    )\r\n};\r\n\r\nexport default ForgotContainer","import React from \"react\";\r\nimport {Route} from \"react-router\";\r\nimport Register from \"../authorization/Register-page/Register\";\r\nimport Forgot from \"../authorization/Forgot-page/Forgot\";\r\nimport SetNewPass from \"../authorization/SetNewPass-page/SetNewPass\";\r\nimport styles from \"../authorization/Auth.module.css\";\r\nimport Header from \"../authorization/Header/Header\";\r\nimport {FORGOT, REGISTER, SET_NEW_PASS, SIGN_IN} from \"../common/Constants\";\r\nimport SignInContainer from \"../authorization/SignIn-page/SignInContainer\";\r\nimport ForgotContainer from \"../authorization/Forgot-page/ForgotContainer\";\r\n\r\n\r\nconst Cards = () => {\r\n\r\n    return (\r\n        <>\r\n        <Header/>\r\n        <div className={styles.wrapperOfAuth}>\r\n            <Route path={SIGN_IN} render={() => <SignInContainer/>}/>\r\n            <Route path={REGISTER} render={() => <Register/>}/>\r\n            <Route path={FORGOT} render={() => <ForgotContainer/>}/>\r\n            <Route path={SET_NEW_PASS} render={() => <SetNewPass/>}/>\r\n        </div>\r\n            </>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n\r\n","import React from \"react\";\r\n\r\nconst initialState = {\r\n    email: '',\r\n    loading: false,\r\n    disabled: false,\r\n    error: null,\r\n    emailApproved: false\r\n}\r\n\r\nconst forgotReducer = (state = initialState, action: any) =>{\r\n   switch (action.type) {\r\n       case 'RESTORE-FORGOT-PASSWORD': {\r\n         return {\r\n             ...state, email: action.email\r\n         }\r\n       }\r\n       case 'SET-LOADING-DATA-FORGOT-PAGE': {\r\n           return {\r\n               ...state,\r\n               loading: action.loading,\r\n               disabled: action.disabled,\r\n               emailApproved: action.emailApproved\r\n           }\r\n       }\r\n       case 'SET-VALUE-ERROR': {\r\n           return {\r\n               ...state,\r\n               error: action.error\r\n           }\r\n       }\r\n\r\n   }\r\n   return state\r\n}\r\n\r\nexport default forgotReducer","import React from \"react\";\r\n\r\nconst initialState = {}\r\n\r\nconst profileReducer = (state = initialState) =>{\r\nreturn state\r\n}\r\n\r\nexport default profileReducer","import React from \"react\";\r\n\r\nconst initialState = {}\r\n\r\nconst registerReducer = (state = initialState) =>{\r\n\r\n    return state\r\n}\r\n\r\nexport default registerReducer","import React from \"react\";\r\n\r\nconst initialState = {}\r\n\r\nconst setNewPassReducer = (state = initialState ) =>{\r\nreturn state\r\n}\r\n\r\nexport default setNewPassReducer","import React from \"react\";\r\n\r\nconst initialState: signInitialStateType = {\r\n    email: '',\r\n    password: '',\r\n    rememberMe: false,\r\n    loading: false,\r\n    disabled: false\r\n}\r\n\r\nexport type signInitialStateType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean,\r\n    loading: boolean\r\n    disabled: boolean\r\n}\r\n\r\nconst signInReducer = (state = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-SIGN-IN-FORM-VALUES': {\r\n            return{\r\n                ...state,\r\n                email: action.email,\r\n                password: action.password,\r\n                rememberMe: action.rememberMe,\r\n            }\r\n        }\r\n        case 'SET-LOADING-DATA': {\r\n            return{\r\n                ...state,\r\n                loading: action.loading,\r\n                disabled: action.disabled\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return state\r\n}\r\n\r\nexport default signInReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport forgotReducer from \"./reducers/forgot-reducer\";\r\nimport profileReducer from \"./reducers/profile-reducer\";\r\nimport registerReducer from \"./reducers/registser-reducer\";\r\nimport setNewPassReducer from \"./reducers/setNewPass-reducer\";\r\nimport signInReducer from \"./reducers/signIn-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    forgot: forgotReducer,\r\n    register: registerReducer,\r\n    setNewPass: setNewPassReducer,\r\n    signIn: signInReducer,\r\n    profile: profileReducer,\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport Cards from \"./ui/cards/Cards\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./bll/store\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <Cards/>\r\n            </Provider>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forLinks\":\"Common_forLinks__1l5g1\",\"forInput\":\"Common_forInput__3E9bg\",\"forButton\":\"Common_forButton__3VnRI\"};"],"sourceRoot":""}